{"version":3,"sources":["redux/actions/contactsAction.js","redux/constants/contactsConst.js","components/PhoneForm/PhoneForm.js","components/FindContact/FindContact.js","components/App/App.js","redux/reducers/contactsReducer.js","redux/index.js","redux/store.js","index.js"],"names":["readFromLocal","createAction","addContact","name","number","payload","id","uuidv4","deleteContact","inputValue","e","target","value","PhoneForm","submitForm","contactInputValue","useState","result","setResult","useEffect","CSSTransition","in","classNames","timeout","mountOnEnter","className","onSubmit","type","onChange","mapDispatchToProps","connect","state","filter","contacts","items","getFilteredContacts","item","toLowerCase","includes","length","TransitionGroup","component","map","key","onClick","App","setState","preventDefault","props","find","toggle","status","writedContacts","localStorage","getItem","this","JSON","parse","prevProps","PrevState","setItem","stringify","unmountOnExit","Component","createReducer","contact","combineReducers","store","configureStore","reducer","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f77381b.chunk.js","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport { LOCAL, ADD, DELETE, VALUE } from \"../constants/contactsConst\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nexport const readFromLocal = createAction(LOCAL);\nexport const addContact = createAction(ADD, function (name, number) {\n  return {\n    payload: {\n      name,\n      number,\n      id: uuidv4(),\n    },\n  };\n});\nexport const deleteContact = createAction(DELETE);\nexport const inputValue = createAction(VALUE, (e) => ({\n  payload: e.target.value,\n}));\n\n// ========================================\n\n// const readFromLocal = (arr) => ({\n//   type: LOCAL,\n//   payload: arr,\n// });\n\n// const addContact = (name, number) => ({\n//   type: ADD,\n//   payload: {\n//     name,\n//     number,\n//     id: uuidv4(),\n//   },\n// });\n\n// const deleteContact = (e) => ({\n//   type: DELETE,\n//   payload: e.target.id,\n// });\n\n// const inputValue = (e) => ({\n//   type: VALUE,\n//   payload: e.target.value,\n// });\n\n// export default {\n//   readFromLocal,\n//   addContact,\n//   deleteContact,\n//   inputValue,\n// };\n","export const LOCAL = \"@contacts/localstorage\";\nexport const ADD = \"@contacts/add\";\nexport const DELETE = \"@contacts/delete\";\nexport const VALUE = \"@contacts/value\";\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./PhoneForm.css\";\n\nconst PhoneForm = ({ submitForm, name, contactInputValue, number }) => {\n  const [result, setResult] = useState(false);\n\n  useEffect(() => {\n    setResult(true);\n  }, []);\n\n  return (\n    <>\n      <CSSTransition in={result} classNames=\"title\" timeout={500} mountOnEnter>\n        <h2 className=\"title\">Phonebook</h2>\n      </CSSTransition>\n\n      <form className=\"form\" onSubmit={submitForm}>\n        <span>Name</span>\n        <br></br>\n        <input\n          className=\"input_name\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={contactInputValue}\n        ></input>\n        <br></br>\n        <span>Number</span>\n        <br></br>\n        <input\n          className=\"input_number\"\n          type=\"text\"\n          name=\"number\"\n          value={number}\n          onChange={contactInputValue}\n        ></input>\n        <br></br>\n        <button className=\"submit_btn\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default PhoneForm;\n\nPhoneForm.propTypes = {\n  submitForm: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  contactInputValue: PropTypes.func.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport \"../FindContact/FindContact.css\";\nimport { deleteContact, inputValue } from \"../../redux/actions/contactsAction\";\n\nconst FindContact = ({ filter, contacts, inputValue, deleteContact }) => {\n  const getFilteredContacts = () => {\n    return contacts.filter((item) =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  return (\n    <>\n      {getFilteredContacts().length > 1 && (\n        <div className=\"search-container\">\n          {/* <h3>Contacts</h3> */}\n          <span>Find contacts by name</span>\n          <br></br>\n          <input type=\"text\" onChange={inputValue}></input>\n        </div>\n      )}\n      <div className=\"search_info\">\n        <TransitionGroup component=\"ul\" className=\"contact_list\">\n          {getFilteredContacts().map((item) => (\n            <CSSTransition key={item.id} classNames=\"list__item\" timeout={800}>\n              <li className=\"contact_item\" key={item.id}>\n                {item.name} : {item.number}\n                <button\n                  className=\"delete_btn\"\n                  type=\"button\"\n                  onClick={() => deleteContact(item.id)}\n                >\n                  Delete\n                </button>\n              </li>\n            </CSSTransition>\n          ))}\n        </TransitionGroup>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    filter: state.contacts.filter,\n    contacts: state.contacts.items,\n  };\n};\n\nconst mapDispatchToProps = {\n  inputValue,\n  deleteContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FindContact);\n\nFindContact.propTypes = {\n  deleteContact: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { readFromLocal, addContact } from \"../../redux/actions/contactsAction\";\nimport PfoneForm from \"../PhoneForm/PhoneForm\";\nimport FindContact from \"../FindContact/FindContact\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n    value: false,\n  };\n\n  contactInputValue = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submitForm = (e) => {\n    e.preventDefault();\n    const { name, number, value } = this.state;\n    if (this.props.contacts.find((item) => item.name === this.state.name)) {\n      this.toggle(value);\n      return;\n    }\n\n    this.props.addContact(name, number);\n\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  toggle = (status) => {\n    this.setState({\n      value: !status,\n    });\n  };\n\n  componentDidMount() {\n    const writedContacts = localStorage.getItem(\"contacts\");\n    if (writedContacts) {\n      this.props.readFromLocal(JSON.parse(writedContacts));\n    }\n  }\n\n  componentDidUpdate(prevProps, PrevState) {\n    if (prevProps.contacts !== this.props.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.props.contacts));\n    }\n  }\n\n  render() {\n    const { name, number, value } = this.state;\n    const test = () => {\n      this.toggle(true);\n    };\n\n    return (\n      <>\n        <CSSTransition\n          in={value}\n          classNames=\"alert\"\n          timeout={500}\n          mountOnEnter\n          unmountOnExit\n        >\n          <button\n            className=\"alert\"\n            onClick={test}\n          >{`${name} alredy exist`}</button>\n        </CSSTransition>\n\n        <PfoneForm\n          submitForm={this.submitForm}\n          name={name}\n          contactInputValue={this.contactInputValue}\n          number={number}\n        />\n        <FindContact />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n});\n\nconst mapDispatchToProps = {\n  addContact,\n  readFromLocal,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  readFromLocal,\n  addContact,\n  deleteContact,\n  inputValue,\n} from \"../actions/contactsAction\";\n\nexport const items = createReducer([], {\n  [readFromLocal]: (state, { payload }) => payload,\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter((contact) => contact.id !== payload),\n});\n\nexport const filter = createReducer(\"\", {\n  [inputValue]: (state, { payload }) => (state = payload),\n});\n\n// =========================================\n// import { combineReducers } from \"redux\";\n// import { ADD, DELETE, LOCAL, VALUE } from \"../constants/contactsConst\";\n\n// const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case ADD:\n//       return [...state, payload];\n//     case LOCAL:\n//       return payload;\n//     case DELETE:\n//       return state.filter((contact) => contact.id !== payload.target.id);\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case VALUE:\n//       return (state = payload.target.value);\n//     default:\n//       return state;\n//   }\n// };\n\n// export default combineReducers({\n//   items,\n//   filter,\n// });\n","import { combineReducers } from \"redux\";\nimport { items, filter } from \"./reducers/contactsReducer\";\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","// import { createStore, combineReducers } from \"redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\n// import contactsReducer from \"./reducers/contactsReducer\";\nimport index from \"./index\";\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\nconst store = configureStore({\n  reducer: {\n    contacts: index,\n  },\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App/App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}