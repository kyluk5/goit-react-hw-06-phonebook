{"version":3,"sources":["redux/constants/contactsConst.js","redux/actions/contactsAction.js","components/PhoneForm/PhoneForm.js","components/FindContact/FindContact.js","components/App/App.js","redux/reducers/contactsReducer.js","redux/store.js","index.js"],"names":["LOCAL","ADD","DELETE","VALUE","readFromLocal","arr","type","payload","addContact","name","number","id","uuidv4","deleteContact","e","target","inputValue","value","PhoneForm","submitForm","contactName","contactNumber","useState","result","setResult","useEffect","CSSTransition","in","classNames","timeout","mountOnEnter","className","onSubmit","onChange","mapDispatchToProps","filterValue","contactsAction","connect","state","filter","contacts","items","getFilteredContacts","item","toLowerCase","includes","length","TransitionGroup","component","map","key","onClick","App","setState","preventDefault","props","find","toggle","addNewContact","status","writedContacts","localStorage","getItem","this","readFromLocalStorage","JSON","parse","prevProps","PrevState","setItem","stringify","unmountOnExit","Component","contactsActions","deleteEachContact","combineReducers","contact","rootReducer","contactsReducer","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b455f35.chunk.js","sourcesContent":["export const LOCAL = \"@contacts/localstorage\";\nexport const ADD = \"@contacts/add\";\nexport const DELETE = \"@contacts/delete\";\nexport const VALUE = \"@contacts/value\";\n","import { v4 as uuidv4 } from \"uuid\";\nimport { LOCAL, ADD, DELETE, VALUE } from \"../constants/contactsConst\";\n\nconst readFromLocal = (arr) => ({\n  type: LOCAL,\n  payload: arr,\n});\n\nconst addContact = (name, number) => ({\n  type: ADD,\n  payload: {\n    name,\n    number,\n    id: uuidv4(),\n  },\n});\n\nconst deleteContact = (e) => ({\n  type: DELETE,\n  payload: e.target.id,\n});\n\nconst inputValue = (e) => ({\n  type: VALUE,\n  payload: e.target.value,\n});\n\nexport default {\n  readFromLocal,\n  addContact,\n  deleteContact,\n  inputValue,\n};\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./PhoneForm.css\";\n\nconst PhoneForm = ({\n  submitForm,\n  name,\n  contactName,\n  number,\n  contactNumber,\n}) => {\n  const [result, setResult] = useState(false);\n\n  useEffect(() => {\n    setResult(true);\n  }, []);\n\n  return (\n    <>\n      <CSSTransition in={result} classNames=\"title\" timeout={500} mountOnEnter>\n        <h2 className=\"title\">Phonebook</h2>\n      </CSSTransition>\n\n      <form className=\"form\" onSubmit={submitForm}>\n        <span>Name</span>\n        <br></br>\n        <input\n          className=\"input_name\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={contactName}\n        ></input>\n        <br></br>\n        <span>Number</span>\n        <br></br>\n        <input\n          className=\"input_number\"\n          type=\"text\"\n          name=\"number\"\n          value={number}\n          onChange={contactNumber}\n        ></input>\n        <br></br>\n        <button className=\"submit_btn\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default PhoneForm;\n\nPhoneForm.propTypes = {\n  submitForm: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  contactName: PropTypes.func.isRequired,\n  number: PropTypes.string.isRequired,\n  contactNumber: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport \"../FindContact/FindContact.css\";\nimport contactsAction from \"../../redux/actions/contactsAction\";\n\nconst FindContact = ({ filter, contacts, filterValue, deleteContact }) => {\n  const getFilteredContacts = () => {\n    return contacts.filter((item) =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  return (\n    <>\n      {getFilteredContacts().length > 1 && (\n        <div className=\"search-container\">\n          {/* <h3>Contacts</h3> */}\n          <span>Find contacts by name</span>\n          <br></br>\n          <input type=\"text\" onChange={filterValue}></input>\n        </div>\n      )}\n      <div className=\"search_info\">\n        <TransitionGroup component=\"ul\" className=\"contact_list\">\n          {getFilteredContacts().map((item) => (\n            <CSSTransition key={item.id} classNames=\"list__item\" timeout={800}>\n              <li className=\"contact_item\" key={item.id}>\n                {item.name} : {item.number}\n                <button\n                  className=\"delete_btn\"\n                  type=\"button\"\n                  id={item.id}\n                  onClick={deleteContact}\n                >\n                  Delete\n                </button>\n              </li>\n            </CSSTransition>\n          ))}\n        </TransitionGroup>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  filter: state.contacts.filter,\n  contacts: state.contacts.items,\n});\n\nconst mapDispatchToProps = {\n  filterValue: contactsAction.inputValue,\n  deleteContact: contactsAction.deleteContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FindContact);\n\nFindContact.propTypes = {\n  filterValue: PropTypes.func.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport contactsActions from \"../../redux/actions/contactsAction\";\nimport PfoneForm from \"../PhoneForm/PhoneForm\";\nimport FindContact from \"../FindContact/FindContact\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n    value: false,\n  };\n\n  contactName = (e) => {\n    this.setState({\n      name: e.target.value,\n    });\n  };\n\n  contactNumber = (e) => {\n    this.setState({\n      number: e.target.value,\n    });\n  };\n\n  submitForm = (e) => {\n    e.preventDefault();\n    const { name, number, value } = this.state;\n    if (this.props.contacts.find((item) => item.name === this.state.name)) {\n      this.toggle(value);\n      return;\n    }\n\n    this.props.addNewContact(name, number);\n\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  toggle = (status) => {\n    this.setState({\n      value: !status,\n    });\n  };\n\n  componentDidMount() {\n    const writedContacts = localStorage.getItem(\"contacts\");\n    if (writedContacts) {\n      this.props.readFromLocalStorage(JSON.parse(writedContacts));\n    }\n  }\n\n  componentDidUpdate(prevProps, PrevState) {\n    if (prevProps.contacts !== this.props.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.props.contacts));\n    }\n  }\n\n  render() {\n    const { name, number, value } = this.state;\n    const test = () => {\n      this.toggle(true);\n    };\n\n    return (\n      <>\n        <CSSTransition\n          in={value}\n          classNames=\"alert\"\n          timeout={500}\n          mountOnEnter\n          unmountOnExit\n        >\n          <button\n            className=\"alert\"\n            onClick={test}\n          >{`${name} alredy exist`}</button>\n        </CSSTransition>\n\n        <PfoneForm\n          submitForm={this.submitForm}\n          name={name}\n          contactName={this.contactName}\n          number={number}\n          contactNumber={this.contactNumber}\n        />\n        <FindContact />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n});\n\nconst mapDispatchToProps = {\n  addNewContact: contactsActions.addContact,\n  readFromLocalStorage: contactsActions.readFromLocal,\n  deleteEachContact: contactsActions.deleteContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from \"redux\";\nimport { ADD, DELETE, LOCAL, VALUE } from \"../constants/contactsConst\";\n\nconst items = (state = [], { type, payload }) => {\n  switch (type) {\n    case ADD:\n      return [...state, payload];\n    case LOCAL:\n      return payload;\n    case DELETE:\n      return state.filter((contact) => contact.id !== payload);\n    default:\n      return state;\n  }\n};\n\nconst filter = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case VALUE:\n      return (state = payload);\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { createStore, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport contactsReducer from \"./reducers/contactsReducer\";\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App/App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}